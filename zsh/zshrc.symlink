# shortcut to this dotfiles path is $ZSH
export ZSH=$HOME/.dotfiles

# your project folder that we can `c [tab]` to
export PROJECTS=~/Code

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of our zsh files
typeset -U config_files
config_files=($ZSH/**/*.zsh)

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source $file
done

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source $file
done

# initialize autocomplete here, otherwise functions won't be loaded
autoload -U compinit
compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source $file
done

unset config_files

# Set Apple Terminal.app resume directory
# http://superuser.com/questions/313650/resume-zsh-terminal-os-x-lion

if [[ $TERM_PROGRAM == "Apple_Terminal" ]] && [[ -z "$INSIDE_EMACS" ]] {
  function chpwd {
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
  }

  chpwd
}

# Python & Virtualenv

export PYTHONPATH=${PYTHONPATH}:/usr/bin
export PIP_REQUIRE_VIRTUALENV=true
export WORKON_HOME=~/.envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python
source /usr/local/bin/virtualenvwrapper.sh

### Added by the Heroku Toolbelt

PATH="/usr/local/heroku/bin:$PATH"

# Dynamically set NPM_TOKEN from .npmrc

export NPM_TOKEN=$(cat ~/.npmrc | sed -e "s/^\/\/registry\.npmjs\.org\/:_authToken=//")

# Node virtualenv

export NVM_DIR=~/.nvm
source $(brew --prefix nvm)/nvm.sh

# Add gcloud executables to $PATH
# https://cloud.google.com/sdk/docs/

PATH=~/src/google-cloud-sdk/bin:$PATH

# Stop trying to correct 'tsc'

alias tsc='nocorrect tsc'

# Stop trying to correct 'serverless'

alias serverless='nocorrect serverless'

###-begin-doing-completions-###
#
# yargs command completion script
#
# Installation: doing completion >> ~/.bashrc
#    or doing completion >> ~/.bash_profile on OSX.
#

# Load ZSH `complete`

autoload bashcompinit
bashcompinit

_yargs_completions()
{
    local cur_word args type_list

    cur_word="${COMP_WORDS[COMP_CWORD]}"
    args=("${COMP_WORDS[@]}")

    # ask yargs to generate completions.
    type_list=$(doing --get-yargs-completions "${args[@]}")

    COMPREPLY=( $(compgen -W "${type_list}" -- ${cur_word}) )

    # if no match was found, fall back to filename completion
    if [ ${#COMPREPLY[@]} -eq 0 ]; then
      COMPREPLY=( $(compgen -f -- "${cur_word}" ) )
    fi

    return 0
}
complete -F _yargs_completions doing
###-end-doing-completions-###

PATH="/usr/local/opt/elasticsearch@2.4/bin:$PATH"

export PATH
